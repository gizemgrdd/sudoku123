#include <ctime> // zaman için kullanılıyor
#include <iostream> 
#include <stdlib.h> // standart kütüphaneyi çağırır.
#include <algorithm>
#include <iterator> 
#include <string.h> // string türü için
#include <windows.h> // renk için kullanılan c++ kütüphanesi

using namespace std;


class Sudoku
{ //9 hücreyi içermesi gereken işaretçiler
public:
	int *cells[9];
	bool dupe(int val) 
	{
		//begin başlangıç pozisyonuna geri döndürmek için kullanılır
		return any_of(begin(cells), end(cells), [&](int *i) {return *i == val;}
		);
	};

	void print() 
	{
		for (int i = 0; i < 9; i++) 
		{
			cout << (*cells[i]) << " ";
		}
		cout << "\n";
	};
};

//koyulacak şeritlerin renklerinin ana fonksiyonu
void setcolor(unsigned short color)                 
{                                                  
	HANDLE hcon = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hcon, color);
}

//3x3 lük kare olacak şekilde ayırıp çözüp aralarına şerit koyan class kısmı
class Tahta 
{
public:
	int data[9][9] = { {0} }; //pano verileri ana giriş
	Sudoku rows[9]; // satır verileri
	Sudoku cols[9]; // sütun verileri
	Sudoku sqrs[9]; // Veri alanlarını gösterir
	int(*fixed)[9][9]; // sabit sayılar

	Tahta (int(*f)[9][9]) :fixed(f) 
	{
		for (int i = 0; i < 9; i++) 
		{
			for (int j = 0; j < 9; j++) 
			{
				rows[i].cells[j] = &(data[i][j]);
				cols[i].cells[j] = &(data[j][i]);
				sqrs[i].cells[j] = &(data[j / 3 + (i / 3) * 3][j % 3 + (i * 3) % 9]);
			}
		}
	};
 //aynı değerleri belirleyip geri döndüren kısım
	bool isDuplicate(int i, int j, int val) 
	{
		rows[i].dupe(val) || cols[j].dupe(val) || sqrs[j / 3 + (i / 3) * 3].dupe(val);
		return rows[i].dupe(val) || cols[j].dupe(val) || sqrs[j / 3 + (i / 3) * 3].dupe(val);
	};

//sudokuyu çözen kısım
	void solve()
	{
		//çalışma kopyaya sabitlendi 
		memcpy(&data, fixed, 9 * 9 * sizeof(int));
		//sabit ilerledi
		for (int i = 0; i < 9; i++) 
		{
			for (int j = 0; j < 9; j++)
			{
				//eğer  0 ise
				if ((*fixed)[i][j] == 0) 
				{
					//4 Sıfırlarken çalışma artışı
					int n = data[i][j];
					while (true) 
					{
						n++;
						// eğer veri > 9
						if (n > 9) 
						{
							//verileri 0 olarak ayarla
							data[i][j] = 0;
							// ==0 düzeltinceye kadar geri git
							do 
							{
								if (--j < 0) 
								{
									j = 8;
									i--;
								}
							} 
							while ((*fixed)[i][j] > 0);
							//4 e git
							j--; 
							//sonraki artışı durdur
							break;
						}
						//Aynı olmadığı zaman
						if (!isDuplicate(i, j, n)) 
						{
							data[i][j] = n;
							break;
						};
					}
				}
			}
		}
	};
 //sodukuyu yazan kısım
	void print()
	{
		for (int i = 0; i < 9; i++)
		{
			for (int j = 0; j < 9; j++)
			{
				cout << data[i][j] << " ";
				if (j == 2 || j == 5)
				{
					setcolor(12);
					cout << "| ";
					setcolor(7);
				}
			}
			cout << "\n";
			if (i == 2 || i == 5) {
				for (int k = 0; k < 22; k++)
				{
					setcolor(12);
					cout << "-";
					setcolor(7);
				}
				cout << "\n";
			}
		}
	};
};

//bizim ana çalışan kısım
int main(int, const char** argv) 
{
//bizim atadığımız değerler
	int hard[9][9] = { {0,0,2,0,0,0,0,0,0},
					  {0,0,0,0,0,0,6,9,0},
					  {3,8,0,9,0,0,0,0,0},
					  {0,0,3,0,6,0,0,0,0},
					  {0,1,0,2,0,0,0,0,4},
					  {0,0,7,0,4,0,5,0,0},
					  {0,0,1,0,5,0,0,0,0},
					  {0,7,4,0,0,0,0,0,2},
					  {0,2,0,7,0,0,0,8,0} 
	};
	Tahta oyun(&hard);
	clock_t basla;
	basla = clock();
    oyun.solve();
	cout << " Time: " << (clock() - basla) / (double)(CLOCKS_PER_SEC / 1000) << " ms" << endl;
	oyun.print();
	return 0;
}
